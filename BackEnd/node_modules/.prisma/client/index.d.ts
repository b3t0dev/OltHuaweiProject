
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model oltFound
 * 
 */
export type oltFound = $Result.DefaultSelection<Prisma.$oltFoundPayload>
/**
 * Model slotsOLT
 * 
 */
export type slotsOLT = $Result.DefaultSelection<Prisma.$slotsOLTPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.oltFound`: Exposes CRUD operations for the **oltFound** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OltFounds
    * const oltFounds = await prisma.oltFound.findMany()
    * ```
    */
  get oltFound(): Prisma.oltFoundDelegate<ExtArgs>;

  /**
   * `prisma.slotsOLT`: Exposes CRUD operations for the **slotsOLT** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SlotsOLTS
    * const slotsOLTS = await prisma.slotsOLT.findMany()
    * ```
    */
  get slotsOLT(): Prisma.slotsOLTDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    oltFound: 'oltFound',
    slotsOLT: 'slotsOLT'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'oltFound' | 'slotsOLT'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      oltFound: {
        payload: Prisma.$oltFoundPayload<ExtArgs>
        fields: Prisma.oltFoundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.oltFoundFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.oltFoundFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload>
          }
          findFirst: {
            args: Prisma.oltFoundFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.oltFoundFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload>
          }
          findMany: {
            args: Prisma.oltFoundFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload>[]
          }
          create: {
            args: Prisma.oltFoundCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload>
          }
          delete: {
            args: Prisma.oltFoundDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload>
          }
          update: {
            args: Prisma.oltFoundUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload>
          }
          deleteMany: {
            args: Prisma.oltFoundDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.oltFoundUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.oltFoundUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$oltFoundPayload>
          }
          aggregate: {
            args: Prisma.OltFoundAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOltFound>
          }
          groupBy: {
            args: Prisma.oltFoundGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OltFoundGroupByOutputType>[]
          }
          count: {
            args: Prisma.oltFoundCountArgs<ExtArgs>,
            result: $Utils.Optional<OltFoundCountAggregateOutputType> | number
          }
        }
      }
      slotsOLT: {
        payload: Prisma.$slotsOLTPayload<ExtArgs>
        fields: Prisma.slotsOLTFieldRefs
        operations: {
          findUnique: {
            args: Prisma.slotsOLTFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.slotsOLTFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload>
          }
          findFirst: {
            args: Prisma.slotsOLTFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.slotsOLTFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload>
          }
          findMany: {
            args: Prisma.slotsOLTFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload>[]
          }
          create: {
            args: Prisma.slotsOLTCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload>
          }
          delete: {
            args: Prisma.slotsOLTDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload>
          }
          update: {
            args: Prisma.slotsOLTUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload>
          }
          deleteMany: {
            args: Prisma.slotsOLTDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.slotsOLTUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.slotsOLTUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$slotsOLTPayload>
          }
          aggregate: {
            args: Prisma.SlotsOLTAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSlotsOLT>
          }
          groupBy: {
            args: Prisma.slotsOLTGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SlotsOLTGroupByOutputType>[]
          }
          count: {
            args: Prisma.slotsOLTCountArgs<ExtArgs>,
            result: $Utils.Optional<SlotsOLTCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OltFoundCountOutputType
   */

  export type OltFoundCountOutputType = {
    slots: number
  }

  export type OltFoundCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    slots?: boolean | OltFoundCountOutputTypeCountSlotsArgs
  }

  // Custom InputTypes

  /**
   * OltFoundCountOutputType without action
   */
  export type OltFoundCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OltFoundCountOutputType
     */
    select?: OltFoundCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OltFoundCountOutputType without action
   */
  export type OltFoundCountOutputTypeCountSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: slotsOLTWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model oltFound
   */

  export type AggregateOltFound = {
    _count: OltFoundCountAggregateOutputType | null
    _avg: OltFoundAvgAggregateOutputType | null
    _sum: OltFoundSumAggregateOutputType | null
    _min: OltFoundMinAggregateOutputType | null
    _max: OltFoundMaxAggregateOutputType | null
  }

  export type OltFoundAvgAggregateOutputType = {
    id: number | null
  }

  export type OltFoundSumAggregateOutputType = {
    id: number | null
  }

  export type OltFoundMinAggregateOutputType = {
    id: number | null
    status: boolean | null
    OltName: string | null
    Armario: string | null
    PowerdB: string | null
    maxClients: string | null
    ipAddress: string | null
  }

  export type OltFoundMaxAggregateOutputType = {
    id: number | null
    status: boolean | null
    OltName: string | null
    Armario: string | null
    PowerdB: string | null
    maxClients: string | null
    ipAddress: string | null
  }

  export type OltFoundCountAggregateOutputType = {
    id: number
    status: number
    OltName: number
    Armario: number
    PowerdB: number
    maxClients: number
    ipAddress: number
    _all: number
  }


  export type OltFoundAvgAggregateInputType = {
    id?: true
  }

  export type OltFoundSumAggregateInputType = {
    id?: true
  }

  export type OltFoundMinAggregateInputType = {
    id?: true
    status?: true
    OltName?: true
    Armario?: true
    PowerdB?: true
    maxClients?: true
    ipAddress?: true
  }

  export type OltFoundMaxAggregateInputType = {
    id?: true
    status?: true
    OltName?: true
    Armario?: true
    PowerdB?: true
    maxClients?: true
    ipAddress?: true
  }

  export type OltFoundCountAggregateInputType = {
    id?: true
    status?: true
    OltName?: true
    Armario?: true
    PowerdB?: true
    maxClients?: true
    ipAddress?: true
    _all?: true
  }

  export type OltFoundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which oltFound to aggregate.
     */
    where?: oltFoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of oltFounds to fetch.
     */
    orderBy?: oltFoundOrderByWithRelationInput | oltFoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: oltFoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` oltFounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` oltFounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned oltFounds
    **/
    _count?: true | OltFoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OltFoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OltFoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OltFoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OltFoundMaxAggregateInputType
  }

  export type GetOltFoundAggregateType<T extends OltFoundAggregateArgs> = {
        [P in keyof T & keyof AggregateOltFound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOltFound[P]>
      : GetScalarType<T[P], AggregateOltFound[P]>
  }




  export type oltFoundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: oltFoundWhereInput
    orderBy?: oltFoundOrderByWithAggregationInput | oltFoundOrderByWithAggregationInput[]
    by: OltFoundScalarFieldEnum[] | OltFoundScalarFieldEnum
    having?: oltFoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OltFoundCountAggregateInputType | true
    _avg?: OltFoundAvgAggregateInputType
    _sum?: OltFoundSumAggregateInputType
    _min?: OltFoundMinAggregateInputType
    _max?: OltFoundMaxAggregateInputType
  }

  export type OltFoundGroupByOutputType = {
    id: number
    status: boolean
    OltName: string
    Armario: string
    PowerdB: string
    maxClients: string
    ipAddress: string
    _count: OltFoundCountAggregateOutputType | null
    _avg: OltFoundAvgAggregateOutputType | null
    _sum: OltFoundSumAggregateOutputType | null
    _min: OltFoundMinAggregateOutputType | null
    _max: OltFoundMaxAggregateOutputType | null
  }

  type GetOltFoundGroupByPayload<T extends oltFoundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OltFoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OltFoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OltFoundGroupByOutputType[P]>
            : GetScalarType<T[P], OltFoundGroupByOutputType[P]>
        }
      >
    >


  export type oltFoundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    OltName?: boolean
    Armario?: boolean
    PowerdB?: boolean
    maxClients?: boolean
    ipAddress?: boolean
    slots?: boolean | oltFound$slotsArgs<ExtArgs>
    _count?: boolean | OltFoundCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oltFound"]>

  export type oltFoundSelectScalar = {
    id?: boolean
    status?: boolean
    OltName?: boolean
    Armario?: boolean
    PowerdB?: boolean
    maxClients?: boolean
    ipAddress?: boolean
  }

  export type oltFoundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    slots?: boolean | oltFound$slotsArgs<ExtArgs>
    _count?: boolean | OltFoundCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $oltFoundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "oltFound"
    objects: {
      slots: Prisma.$slotsOLTPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: boolean
      OltName: string
      Armario: string
      PowerdB: string
      maxClients: string
      ipAddress: string
    }, ExtArgs["result"]["oltFound"]>
    composites: {}
  }


  type oltFoundGetPayload<S extends boolean | null | undefined | oltFoundDefaultArgs> = $Result.GetResult<Prisma.$oltFoundPayload, S>

  type oltFoundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<oltFoundFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OltFoundCountAggregateInputType | true
    }

  export interface oltFoundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['oltFound'], meta: { name: 'oltFound' } }
    /**
     * Find zero or one OltFound that matches the filter.
     * @param {oltFoundFindUniqueArgs} args - Arguments to find a OltFound
     * @example
     * // Get one OltFound
     * const oltFound = await prisma.oltFound.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends oltFoundFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, oltFoundFindUniqueArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OltFound that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {oltFoundFindUniqueOrThrowArgs} args - Arguments to find a OltFound
     * @example
     * // Get one OltFound
     * const oltFound = await prisma.oltFound.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends oltFoundFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, oltFoundFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OltFound that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {oltFoundFindFirstArgs} args - Arguments to find a OltFound
     * @example
     * // Get one OltFound
     * const oltFound = await prisma.oltFound.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends oltFoundFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, oltFoundFindFirstArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OltFound that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {oltFoundFindFirstOrThrowArgs} args - Arguments to find a OltFound
     * @example
     * // Get one OltFound
     * const oltFound = await prisma.oltFound.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends oltFoundFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, oltFoundFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OltFounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {oltFoundFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OltFounds
     * const oltFounds = await prisma.oltFound.findMany()
     * 
     * // Get first 10 OltFounds
     * const oltFounds = await prisma.oltFound.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oltFoundWithIdOnly = await prisma.oltFound.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends oltFoundFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, oltFoundFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OltFound.
     * @param {oltFoundCreateArgs} args - Arguments to create a OltFound.
     * @example
     * // Create one OltFound
     * const OltFound = await prisma.oltFound.create({
     *   data: {
     *     // ... data to create a OltFound
     *   }
     * })
     * 
    **/
    create<T extends oltFoundCreateArgs<ExtArgs>>(
      args: SelectSubset<T, oltFoundCreateArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a OltFound.
     * @param {oltFoundDeleteArgs} args - Arguments to delete one OltFound.
     * @example
     * // Delete one OltFound
     * const OltFound = await prisma.oltFound.delete({
     *   where: {
     *     // ... filter to delete one OltFound
     *   }
     * })
     * 
    **/
    delete<T extends oltFoundDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, oltFoundDeleteArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OltFound.
     * @param {oltFoundUpdateArgs} args - Arguments to update one OltFound.
     * @example
     * // Update one OltFound
     * const oltFound = await prisma.oltFound.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends oltFoundUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, oltFoundUpdateArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OltFounds.
     * @param {oltFoundDeleteManyArgs} args - Arguments to filter OltFounds to delete.
     * @example
     * // Delete a few OltFounds
     * const { count } = await prisma.oltFound.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends oltFoundDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, oltFoundDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OltFounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {oltFoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OltFounds
     * const oltFound = await prisma.oltFound.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends oltFoundUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, oltFoundUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OltFound.
     * @param {oltFoundUpsertArgs} args - Arguments to update or create a OltFound.
     * @example
     * // Update or create a OltFound
     * const oltFound = await prisma.oltFound.upsert({
     *   create: {
     *     // ... data to create a OltFound
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OltFound we want to update
     *   }
     * })
    **/
    upsert<T extends oltFoundUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, oltFoundUpsertArgs<ExtArgs>>
    ): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OltFounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {oltFoundCountArgs} args - Arguments to filter OltFounds to count.
     * @example
     * // Count the number of OltFounds
     * const count = await prisma.oltFound.count({
     *   where: {
     *     // ... the filter for the OltFounds we want to count
     *   }
     * })
    **/
    count<T extends oltFoundCountArgs>(
      args?: Subset<T, oltFoundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OltFoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OltFound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OltFoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OltFoundAggregateArgs>(args: Subset<T, OltFoundAggregateArgs>): Prisma.PrismaPromise<GetOltFoundAggregateType<T>>

    /**
     * Group by OltFound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {oltFoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends oltFoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: oltFoundGroupByArgs['orderBy'] }
        : { orderBy?: oltFoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, oltFoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOltFoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the oltFound model
   */
  readonly fields: oltFoundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for oltFound.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__oltFoundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    slots<T extends oltFound$slotsArgs<ExtArgs> = {}>(args?: Subset<T, oltFound$slotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the oltFound model
   */ 
  interface oltFoundFieldRefs {
    readonly id: FieldRef<"oltFound", 'Int'>
    readonly status: FieldRef<"oltFound", 'Boolean'>
    readonly OltName: FieldRef<"oltFound", 'String'>
    readonly Armario: FieldRef<"oltFound", 'String'>
    readonly PowerdB: FieldRef<"oltFound", 'String'>
    readonly maxClients: FieldRef<"oltFound", 'String'>
    readonly ipAddress: FieldRef<"oltFound", 'String'>
  }
    

  // Custom InputTypes

  /**
   * oltFound findUnique
   */
  export type oltFoundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * Filter, which oltFound to fetch.
     */
    where: oltFoundWhereUniqueInput
  }


  /**
   * oltFound findUniqueOrThrow
   */
  export type oltFoundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * Filter, which oltFound to fetch.
     */
    where: oltFoundWhereUniqueInput
  }


  /**
   * oltFound findFirst
   */
  export type oltFoundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * Filter, which oltFound to fetch.
     */
    where?: oltFoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of oltFounds to fetch.
     */
    orderBy?: oltFoundOrderByWithRelationInput | oltFoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for oltFounds.
     */
    cursor?: oltFoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` oltFounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` oltFounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of oltFounds.
     */
    distinct?: OltFoundScalarFieldEnum | OltFoundScalarFieldEnum[]
  }


  /**
   * oltFound findFirstOrThrow
   */
  export type oltFoundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * Filter, which oltFound to fetch.
     */
    where?: oltFoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of oltFounds to fetch.
     */
    orderBy?: oltFoundOrderByWithRelationInput | oltFoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for oltFounds.
     */
    cursor?: oltFoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` oltFounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` oltFounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of oltFounds.
     */
    distinct?: OltFoundScalarFieldEnum | OltFoundScalarFieldEnum[]
  }


  /**
   * oltFound findMany
   */
  export type oltFoundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * Filter, which oltFounds to fetch.
     */
    where?: oltFoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of oltFounds to fetch.
     */
    orderBy?: oltFoundOrderByWithRelationInput | oltFoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing oltFounds.
     */
    cursor?: oltFoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` oltFounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` oltFounds.
     */
    skip?: number
    distinct?: OltFoundScalarFieldEnum | OltFoundScalarFieldEnum[]
  }


  /**
   * oltFound create
   */
  export type oltFoundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * The data needed to create a oltFound.
     */
    data: XOR<oltFoundCreateInput, oltFoundUncheckedCreateInput>
  }


  /**
   * oltFound update
   */
  export type oltFoundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * The data needed to update a oltFound.
     */
    data: XOR<oltFoundUpdateInput, oltFoundUncheckedUpdateInput>
    /**
     * Choose, which oltFound to update.
     */
    where: oltFoundWhereUniqueInput
  }


  /**
   * oltFound updateMany
   */
  export type oltFoundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update oltFounds.
     */
    data: XOR<oltFoundUpdateManyMutationInput, oltFoundUncheckedUpdateManyInput>
    /**
     * Filter which oltFounds to update
     */
    where?: oltFoundWhereInput
  }


  /**
   * oltFound upsert
   */
  export type oltFoundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * The filter to search for the oltFound to update in case it exists.
     */
    where: oltFoundWhereUniqueInput
    /**
     * In case the oltFound found by the `where` argument doesn't exist, create a new oltFound with this data.
     */
    create: XOR<oltFoundCreateInput, oltFoundUncheckedCreateInput>
    /**
     * In case the oltFound was found with the provided `where` argument, update it with this data.
     */
    update: XOR<oltFoundUpdateInput, oltFoundUncheckedUpdateInput>
  }


  /**
   * oltFound delete
   */
  export type oltFoundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
    /**
     * Filter which oltFound to delete.
     */
    where: oltFoundWhereUniqueInput
  }


  /**
   * oltFound deleteMany
   */
  export type oltFoundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which oltFounds to delete
     */
    where?: oltFoundWhereInput
  }


  /**
   * oltFound.slots
   */
  export type oltFound$slotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    where?: slotsOLTWhereInput
    orderBy?: slotsOLTOrderByWithRelationInput | slotsOLTOrderByWithRelationInput[]
    cursor?: slotsOLTWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SlotsOLTScalarFieldEnum | SlotsOLTScalarFieldEnum[]
  }


  /**
   * oltFound without action
   */
  export type oltFoundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the oltFound
     */
    select?: oltFoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: oltFoundInclude<ExtArgs> | null
  }



  /**
   * Model slotsOLT
   */

  export type AggregateSlotsOLT = {
    _count: SlotsOLTCountAggregateOutputType | null
    _avg: SlotsOLTAvgAggregateOutputType | null
    _sum: SlotsOLTSumAggregateOutputType | null
    _min: SlotsOLTMinAggregateOutputType | null
    _max: SlotsOLTMaxAggregateOutputType | null
  }

  export type SlotsOLTAvgAggregateOutputType = {
    id: number | null
    status: number | null
    OnuDiscovery: number | null
    OnuProvisioned: number | null
    OnuOnline: number | null
    oltId: number | null
  }

  export type SlotsOLTSumAggregateOutputType = {
    id: number | null
    status: number | null
    OnuDiscovery: number | null
    OnuProvisioned: number | null
    OnuOnline: number | null
    oltId: number | null
  }

  export type SlotsOLTMinAggregateOutputType = {
    id: number | null
    status: number | null
    slot: string | null
    OnuDiscovery: number | null
    OnuProvisioned: number | null
    OnuOnline: number | null
    oltId: number | null
  }

  export type SlotsOLTMaxAggregateOutputType = {
    id: number | null
    status: number | null
    slot: string | null
    OnuDiscovery: number | null
    OnuProvisioned: number | null
    OnuOnline: number | null
    oltId: number | null
  }

  export type SlotsOLTCountAggregateOutputType = {
    id: number
    status: number
    slot: number
    OnuDiscovery: number
    OnuProvisioned: number
    OnuOnline: number
    oltId: number
    _all: number
  }


  export type SlotsOLTAvgAggregateInputType = {
    id?: true
    status?: true
    OnuDiscovery?: true
    OnuProvisioned?: true
    OnuOnline?: true
    oltId?: true
  }

  export type SlotsOLTSumAggregateInputType = {
    id?: true
    status?: true
    OnuDiscovery?: true
    OnuProvisioned?: true
    OnuOnline?: true
    oltId?: true
  }

  export type SlotsOLTMinAggregateInputType = {
    id?: true
    status?: true
    slot?: true
    OnuDiscovery?: true
    OnuProvisioned?: true
    OnuOnline?: true
    oltId?: true
  }

  export type SlotsOLTMaxAggregateInputType = {
    id?: true
    status?: true
    slot?: true
    OnuDiscovery?: true
    OnuProvisioned?: true
    OnuOnline?: true
    oltId?: true
  }

  export type SlotsOLTCountAggregateInputType = {
    id?: true
    status?: true
    slot?: true
    OnuDiscovery?: true
    OnuProvisioned?: true
    OnuOnline?: true
    oltId?: true
    _all?: true
  }

  export type SlotsOLTAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which slotsOLT to aggregate.
     */
    where?: slotsOLTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of slotsOLTS to fetch.
     */
    orderBy?: slotsOLTOrderByWithRelationInput | slotsOLTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: slotsOLTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` slotsOLTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` slotsOLTS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned slotsOLTS
    **/
    _count?: true | SlotsOLTCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SlotsOLTAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SlotsOLTSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SlotsOLTMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SlotsOLTMaxAggregateInputType
  }

  export type GetSlotsOLTAggregateType<T extends SlotsOLTAggregateArgs> = {
        [P in keyof T & keyof AggregateSlotsOLT]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSlotsOLT[P]>
      : GetScalarType<T[P], AggregateSlotsOLT[P]>
  }




  export type slotsOLTGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: slotsOLTWhereInput
    orderBy?: slotsOLTOrderByWithAggregationInput | slotsOLTOrderByWithAggregationInput[]
    by: SlotsOLTScalarFieldEnum[] | SlotsOLTScalarFieldEnum
    having?: slotsOLTScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SlotsOLTCountAggregateInputType | true
    _avg?: SlotsOLTAvgAggregateInputType
    _sum?: SlotsOLTSumAggregateInputType
    _min?: SlotsOLTMinAggregateInputType
    _max?: SlotsOLTMaxAggregateInputType
  }

  export type SlotsOLTGroupByOutputType = {
    id: number
    status: number
    slot: string
    OnuDiscovery: number
    OnuProvisioned: number
    OnuOnline: number
    oltId: number
    _count: SlotsOLTCountAggregateOutputType | null
    _avg: SlotsOLTAvgAggregateOutputType | null
    _sum: SlotsOLTSumAggregateOutputType | null
    _min: SlotsOLTMinAggregateOutputType | null
    _max: SlotsOLTMaxAggregateOutputType | null
  }

  type GetSlotsOLTGroupByPayload<T extends slotsOLTGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SlotsOLTGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SlotsOLTGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SlotsOLTGroupByOutputType[P]>
            : GetScalarType<T[P], SlotsOLTGroupByOutputType[P]>
        }
      >
    >


  export type slotsOLTSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    slot?: boolean
    OnuDiscovery?: boolean
    OnuProvisioned?: boolean
    OnuOnline?: boolean
    oltId?: boolean
    olt?: boolean | oltFoundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["slotsOLT"]>

  export type slotsOLTSelectScalar = {
    id?: boolean
    status?: boolean
    slot?: boolean
    OnuDiscovery?: boolean
    OnuProvisioned?: boolean
    OnuOnline?: boolean
    oltId?: boolean
  }

  export type slotsOLTInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    olt?: boolean | oltFoundDefaultArgs<ExtArgs>
  }


  export type $slotsOLTPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "slotsOLT"
    objects: {
      olt: Prisma.$oltFoundPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: number
      slot: string
      OnuDiscovery: number
      OnuProvisioned: number
      OnuOnline: number
      oltId: number
    }, ExtArgs["result"]["slotsOLT"]>
    composites: {}
  }


  type slotsOLTGetPayload<S extends boolean | null | undefined | slotsOLTDefaultArgs> = $Result.GetResult<Prisma.$slotsOLTPayload, S>

  type slotsOLTCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<slotsOLTFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SlotsOLTCountAggregateInputType | true
    }

  export interface slotsOLTDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['slotsOLT'], meta: { name: 'slotsOLT' } }
    /**
     * Find zero or one SlotsOLT that matches the filter.
     * @param {slotsOLTFindUniqueArgs} args - Arguments to find a SlotsOLT
     * @example
     * // Get one SlotsOLT
     * const slotsOLT = await prisma.slotsOLT.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends slotsOLTFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, slotsOLTFindUniqueArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SlotsOLT that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {slotsOLTFindUniqueOrThrowArgs} args - Arguments to find a SlotsOLT
     * @example
     * // Get one SlotsOLT
     * const slotsOLT = await prisma.slotsOLT.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends slotsOLTFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, slotsOLTFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SlotsOLT that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {slotsOLTFindFirstArgs} args - Arguments to find a SlotsOLT
     * @example
     * // Get one SlotsOLT
     * const slotsOLT = await prisma.slotsOLT.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends slotsOLTFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, slotsOLTFindFirstArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SlotsOLT that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {slotsOLTFindFirstOrThrowArgs} args - Arguments to find a SlotsOLT
     * @example
     * // Get one SlotsOLT
     * const slotsOLT = await prisma.slotsOLT.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends slotsOLTFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, slotsOLTFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SlotsOLTS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {slotsOLTFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SlotsOLTS
     * const slotsOLTS = await prisma.slotsOLT.findMany()
     * 
     * // Get first 10 SlotsOLTS
     * const slotsOLTS = await prisma.slotsOLT.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const slotsOLTWithIdOnly = await prisma.slotsOLT.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends slotsOLTFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, slotsOLTFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SlotsOLT.
     * @param {slotsOLTCreateArgs} args - Arguments to create a SlotsOLT.
     * @example
     * // Create one SlotsOLT
     * const SlotsOLT = await prisma.slotsOLT.create({
     *   data: {
     *     // ... data to create a SlotsOLT
     *   }
     * })
     * 
    **/
    create<T extends slotsOLTCreateArgs<ExtArgs>>(
      args: SelectSubset<T, slotsOLTCreateArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a SlotsOLT.
     * @param {slotsOLTDeleteArgs} args - Arguments to delete one SlotsOLT.
     * @example
     * // Delete one SlotsOLT
     * const SlotsOLT = await prisma.slotsOLT.delete({
     *   where: {
     *     // ... filter to delete one SlotsOLT
     *   }
     * })
     * 
    **/
    delete<T extends slotsOLTDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, slotsOLTDeleteArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SlotsOLT.
     * @param {slotsOLTUpdateArgs} args - Arguments to update one SlotsOLT.
     * @example
     * // Update one SlotsOLT
     * const slotsOLT = await prisma.slotsOLT.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends slotsOLTUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, slotsOLTUpdateArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SlotsOLTS.
     * @param {slotsOLTDeleteManyArgs} args - Arguments to filter SlotsOLTS to delete.
     * @example
     * // Delete a few SlotsOLTS
     * const { count } = await prisma.slotsOLT.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends slotsOLTDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, slotsOLTDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SlotsOLTS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {slotsOLTUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SlotsOLTS
     * const slotsOLT = await prisma.slotsOLT.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends slotsOLTUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, slotsOLTUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SlotsOLT.
     * @param {slotsOLTUpsertArgs} args - Arguments to update or create a SlotsOLT.
     * @example
     * // Update or create a SlotsOLT
     * const slotsOLT = await prisma.slotsOLT.upsert({
     *   create: {
     *     // ... data to create a SlotsOLT
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SlotsOLT we want to update
     *   }
     * })
    **/
    upsert<T extends slotsOLTUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, slotsOLTUpsertArgs<ExtArgs>>
    ): Prisma__slotsOLTClient<$Result.GetResult<Prisma.$slotsOLTPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SlotsOLTS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {slotsOLTCountArgs} args - Arguments to filter SlotsOLTS to count.
     * @example
     * // Count the number of SlotsOLTS
     * const count = await prisma.slotsOLT.count({
     *   where: {
     *     // ... the filter for the SlotsOLTS we want to count
     *   }
     * })
    **/
    count<T extends slotsOLTCountArgs>(
      args?: Subset<T, slotsOLTCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SlotsOLTCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SlotsOLT.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlotsOLTAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SlotsOLTAggregateArgs>(args: Subset<T, SlotsOLTAggregateArgs>): Prisma.PrismaPromise<GetSlotsOLTAggregateType<T>>

    /**
     * Group by SlotsOLT.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {slotsOLTGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends slotsOLTGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: slotsOLTGroupByArgs['orderBy'] }
        : { orderBy?: slotsOLTGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, slotsOLTGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSlotsOLTGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the slotsOLT model
   */
  readonly fields: slotsOLTFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for slotsOLT.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__slotsOLTClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    olt<T extends oltFoundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, oltFoundDefaultArgs<ExtArgs>>): Prisma__oltFoundClient<$Result.GetResult<Prisma.$oltFoundPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the slotsOLT model
   */ 
  interface slotsOLTFieldRefs {
    readonly id: FieldRef<"slotsOLT", 'Int'>
    readonly status: FieldRef<"slotsOLT", 'Int'>
    readonly slot: FieldRef<"slotsOLT", 'String'>
    readonly OnuDiscovery: FieldRef<"slotsOLT", 'Int'>
    readonly OnuProvisioned: FieldRef<"slotsOLT", 'Int'>
    readonly OnuOnline: FieldRef<"slotsOLT", 'Int'>
    readonly oltId: FieldRef<"slotsOLT", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * slotsOLT findUnique
   */
  export type slotsOLTFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * Filter, which slotsOLT to fetch.
     */
    where: slotsOLTWhereUniqueInput
  }


  /**
   * slotsOLT findUniqueOrThrow
   */
  export type slotsOLTFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * Filter, which slotsOLT to fetch.
     */
    where: slotsOLTWhereUniqueInput
  }


  /**
   * slotsOLT findFirst
   */
  export type slotsOLTFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * Filter, which slotsOLT to fetch.
     */
    where?: slotsOLTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of slotsOLTS to fetch.
     */
    orderBy?: slotsOLTOrderByWithRelationInput | slotsOLTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for slotsOLTS.
     */
    cursor?: slotsOLTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` slotsOLTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` slotsOLTS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of slotsOLTS.
     */
    distinct?: SlotsOLTScalarFieldEnum | SlotsOLTScalarFieldEnum[]
  }


  /**
   * slotsOLT findFirstOrThrow
   */
  export type slotsOLTFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * Filter, which slotsOLT to fetch.
     */
    where?: slotsOLTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of slotsOLTS to fetch.
     */
    orderBy?: slotsOLTOrderByWithRelationInput | slotsOLTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for slotsOLTS.
     */
    cursor?: slotsOLTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` slotsOLTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` slotsOLTS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of slotsOLTS.
     */
    distinct?: SlotsOLTScalarFieldEnum | SlotsOLTScalarFieldEnum[]
  }


  /**
   * slotsOLT findMany
   */
  export type slotsOLTFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * Filter, which slotsOLTS to fetch.
     */
    where?: slotsOLTWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of slotsOLTS to fetch.
     */
    orderBy?: slotsOLTOrderByWithRelationInput | slotsOLTOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing slotsOLTS.
     */
    cursor?: slotsOLTWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` slotsOLTS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` slotsOLTS.
     */
    skip?: number
    distinct?: SlotsOLTScalarFieldEnum | SlotsOLTScalarFieldEnum[]
  }


  /**
   * slotsOLT create
   */
  export type slotsOLTCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * The data needed to create a slotsOLT.
     */
    data: XOR<slotsOLTCreateInput, slotsOLTUncheckedCreateInput>
  }


  /**
   * slotsOLT update
   */
  export type slotsOLTUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * The data needed to update a slotsOLT.
     */
    data: XOR<slotsOLTUpdateInput, slotsOLTUncheckedUpdateInput>
    /**
     * Choose, which slotsOLT to update.
     */
    where: slotsOLTWhereUniqueInput
  }


  /**
   * slotsOLT updateMany
   */
  export type slotsOLTUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update slotsOLTS.
     */
    data: XOR<slotsOLTUpdateManyMutationInput, slotsOLTUncheckedUpdateManyInput>
    /**
     * Filter which slotsOLTS to update
     */
    where?: slotsOLTWhereInput
  }


  /**
   * slotsOLT upsert
   */
  export type slotsOLTUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * The filter to search for the slotsOLT to update in case it exists.
     */
    where: slotsOLTWhereUniqueInput
    /**
     * In case the slotsOLT found by the `where` argument doesn't exist, create a new slotsOLT with this data.
     */
    create: XOR<slotsOLTCreateInput, slotsOLTUncheckedCreateInput>
    /**
     * In case the slotsOLT was found with the provided `where` argument, update it with this data.
     */
    update: XOR<slotsOLTUpdateInput, slotsOLTUncheckedUpdateInput>
  }


  /**
   * slotsOLT delete
   */
  export type slotsOLTDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
    /**
     * Filter which slotsOLT to delete.
     */
    where: slotsOLTWhereUniqueInput
  }


  /**
   * slotsOLT deleteMany
   */
  export type slotsOLTDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which slotsOLTS to delete
     */
    where?: slotsOLTWhereInput
  }


  /**
   * slotsOLT without action
   */
  export type slotsOLTDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the slotsOLT
     */
    select?: slotsOLTSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: slotsOLTInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OltFoundScalarFieldEnum: {
    id: 'id',
    status: 'status',
    OltName: 'OltName',
    Armario: 'Armario',
    PowerdB: 'PowerdB',
    maxClients: 'maxClients',
    ipAddress: 'ipAddress'
  };

  export type OltFoundScalarFieldEnum = (typeof OltFoundScalarFieldEnum)[keyof typeof OltFoundScalarFieldEnum]


  export const SlotsOLTScalarFieldEnum: {
    id: 'id',
    status: 'status',
    slot: 'slot',
    OnuDiscovery: 'OnuDiscovery',
    OnuProvisioned: 'OnuProvisioned',
    OnuOnline: 'OnuOnline',
    oltId: 'oltId'
  };

  export type SlotsOLTScalarFieldEnum = (typeof SlotsOLTScalarFieldEnum)[keyof typeof SlotsOLTScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type oltFoundWhereInput = {
    AND?: oltFoundWhereInput | oltFoundWhereInput[]
    OR?: oltFoundWhereInput[]
    NOT?: oltFoundWhereInput | oltFoundWhereInput[]
    id?: IntFilter<"oltFound"> | number
    status?: BoolFilter<"oltFound"> | boolean
    OltName?: StringFilter<"oltFound"> | string
    Armario?: StringFilter<"oltFound"> | string
    PowerdB?: StringFilter<"oltFound"> | string
    maxClients?: StringFilter<"oltFound"> | string
    ipAddress?: StringFilter<"oltFound"> | string
    slots?: SlotsOLTListRelationFilter
  }

  export type oltFoundOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    OltName?: SortOrder
    Armario?: SortOrder
    PowerdB?: SortOrder
    maxClients?: SortOrder
    ipAddress?: SortOrder
    slots?: slotsOLTOrderByRelationAggregateInput
  }

  export type oltFoundWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    OltName?: string
    ipAddress?: string
    AND?: oltFoundWhereInput | oltFoundWhereInput[]
    OR?: oltFoundWhereInput[]
    NOT?: oltFoundWhereInput | oltFoundWhereInput[]
    status?: BoolFilter<"oltFound"> | boolean
    Armario?: StringFilter<"oltFound"> | string
    PowerdB?: StringFilter<"oltFound"> | string
    maxClients?: StringFilter<"oltFound"> | string
    slots?: SlotsOLTListRelationFilter
  }, "id" | "OltName" | "ipAddress">

  export type oltFoundOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    OltName?: SortOrder
    Armario?: SortOrder
    PowerdB?: SortOrder
    maxClients?: SortOrder
    ipAddress?: SortOrder
    _count?: oltFoundCountOrderByAggregateInput
    _avg?: oltFoundAvgOrderByAggregateInput
    _max?: oltFoundMaxOrderByAggregateInput
    _min?: oltFoundMinOrderByAggregateInput
    _sum?: oltFoundSumOrderByAggregateInput
  }

  export type oltFoundScalarWhereWithAggregatesInput = {
    AND?: oltFoundScalarWhereWithAggregatesInput | oltFoundScalarWhereWithAggregatesInput[]
    OR?: oltFoundScalarWhereWithAggregatesInput[]
    NOT?: oltFoundScalarWhereWithAggregatesInput | oltFoundScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"oltFound"> | number
    status?: BoolWithAggregatesFilter<"oltFound"> | boolean
    OltName?: StringWithAggregatesFilter<"oltFound"> | string
    Armario?: StringWithAggregatesFilter<"oltFound"> | string
    PowerdB?: StringWithAggregatesFilter<"oltFound"> | string
    maxClients?: StringWithAggregatesFilter<"oltFound"> | string
    ipAddress?: StringWithAggregatesFilter<"oltFound"> | string
  }

  export type slotsOLTWhereInput = {
    AND?: slotsOLTWhereInput | slotsOLTWhereInput[]
    OR?: slotsOLTWhereInput[]
    NOT?: slotsOLTWhereInput | slotsOLTWhereInput[]
    id?: IntFilter<"slotsOLT"> | number
    status?: IntFilter<"slotsOLT"> | number
    slot?: StringFilter<"slotsOLT"> | string
    OnuDiscovery?: IntFilter<"slotsOLT"> | number
    OnuProvisioned?: IntFilter<"slotsOLT"> | number
    OnuOnline?: IntFilter<"slotsOLT"> | number
    oltId?: IntFilter<"slotsOLT"> | number
    olt?: XOR<OltFoundRelationFilter, oltFoundWhereInput>
  }

  export type slotsOLTOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    slot?: SortOrder
    OnuDiscovery?: SortOrder
    OnuProvisioned?: SortOrder
    OnuOnline?: SortOrder
    oltId?: SortOrder
    olt?: oltFoundOrderByWithRelationInput
  }

  export type slotsOLTWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: slotsOLTWhereInput | slotsOLTWhereInput[]
    OR?: slotsOLTWhereInput[]
    NOT?: slotsOLTWhereInput | slotsOLTWhereInput[]
    status?: IntFilter<"slotsOLT"> | number
    slot?: StringFilter<"slotsOLT"> | string
    OnuDiscovery?: IntFilter<"slotsOLT"> | number
    OnuProvisioned?: IntFilter<"slotsOLT"> | number
    OnuOnline?: IntFilter<"slotsOLT"> | number
    oltId?: IntFilter<"slotsOLT"> | number
    olt?: XOR<OltFoundRelationFilter, oltFoundWhereInput>
  }, "id">

  export type slotsOLTOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    slot?: SortOrder
    OnuDiscovery?: SortOrder
    OnuProvisioned?: SortOrder
    OnuOnline?: SortOrder
    oltId?: SortOrder
    _count?: slotsOLTCountOrderByAggregateInput
    _avg?: slotsOLTAvgOrderByAggregateInput
    _max?: slotsOLTMaxOrderByAggregateInput
    _min?: slotsOLTMinOrderByAggregateInput
    _sum?: slotsOLTSumOrderByAggregateInput
  }

  export type slotsOLTScalarWhereWithAggregatesInput = {
    AND?: slotsOLTScalarWhereWithAggregatesInput | slotsOLTScalarWhereWithAggregatesInput[]
    OR?: slotsOLTScalarWhereWithAggregatesInput[]
    NOT?: slotsOLTScalarWhereWithAggregatesInput | slotsOLTScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"slotsOLT"> | number
    status?: IntWithAggregatesFilter<"slotsOLT"> | number
    slot?: StringWithAggregatesFilter<"slotsOLT"> | string
    OnuDiscovery?: IntWithAggregatesFilter<"slotsOLT"> | number
    OnuProvisioned?: IntWithAggregatesFilter<"slotsOLT"> | number
    OnuOnline?: IntWithAggregatesFilter<"slotsOLT"> | number
    oltId?: IntWithAggregatesFilter<"slotsOLT"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type oltFoundCreateInput = {
    status?: boolean
    OltName: string
    Armario: string
    PowerdB: string
    maxClients: string
    ipAddress: string
    slots?: slotsOLTCreateNestedManyWithoutOltInput
  }

  export type oltFoundUncheckedCreateInput = {
    id?: number
    status?: boolean
    OltName: string
    Armario: string
    PowerdB: string
    maxClients: string
    ipAddress: string
    slots?: slotsOLTUncheckedCreateNestedManyWithoutOltInput
  }

  export type oltFoundUpdateInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    OltName?: StringFieldUpdateOperationsInput | string
    Armario?: StringFieldUpdateOperationsInput | string
    PowerdB?: StringFieldUpdateOperationsInput | string
    maxClients?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    slots?: slotsOLTUpdateManyWithoutOltNestedInput
  }

  export type oltFoundUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    OltName?: StringFieldUpdateOperationsInput | string
    Armario?: StringFieldUpdateOperationsInput | string
    PowerdB?: StringFieldUpdateOperationsInput | string
    maxClients?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    slots?: slotsOLTUncheckedUpdateManyWithoutOltNestedInput
  }

  export type oltFoundUpdateManyMutationInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    OltName?: StringFieldUpdateOperationsInput | string
    Armario?: StringFieldUpdateOperationsInput | string
    PowerdB?: StringFieldUpdateOperationsInput | string
    maxClients?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
  }

  export type oltFoundUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    OltName?: StringFieldUpdateOperationsInput | string
    Armario?: StringFieldUpdateOperationsInput | string
    PowerdB?: StringFieldUpdateOperationsInput | string
    maxClients?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
  }

  export type slotsOLTCreateInput = {
    status: number
    slot: string
    OnuDiscovery: number
    OnuProvisioned: number
    OnuOnline: number
    olt: oltFoundCreateNestedOneWithoutSlotsInput
  }

  export type slotsOLTUncheckedCreateInput = {
    id?: number
    status: number
    slot: string
    OnuDiscovery: number
    OnuProvisioned: number
    OnuOnline: number
    oltId: number
  }

  export type slotsOLTUpdateInput = {
    status?: IntFieldUpdateOperationsInput | number
    slot?: StringFieldUpdateOperationsInput | string
    OnuDiscovery?: IntFieldUpdateOperationsInput | number
    OnuProvisioned?: IntFieldUpdateOperationsInput | number
    OnuOnline?: IntFieldUpdateOperationsInput | number
    olt?: oltFoundUpdateOneRequiredWithoutSlotsNestedInput
  }

  export type slotsOLTUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    slot?: StringFieldUpdateOperationsInput | string
    OnuDiscovery?: IntFieldUpdateOperationsInput | number
    OnuProvisioned?: IntFieldUpdateOperationsInput | number
    OnuOnline?: IntFieldUpdateOperationsInput | number
    oltId?: IntFieldUpdateOperationsInput | number
  }

  export type slotsOLTUpdateManyMutationInput = {
    status?: IntFieldUpdateOperationsInput | number
    slot?: StringFieldUpdateOperationsInput | string
    OnuDiscovery?: IntFieldUpdateOperationsInput | number
    OnuProvisioned?: IntFieldUpdateOperationsInput | number
    OnuOnline?: IntFieldUpdateOperationsInput | number
  }

  export type slotsOLTUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    slot?: StringFieldUpdateOperationsInput | string
    OnuDiscovery?: IntFieldUpdateOperationsInput | number
    OnuProvisioned?: IntFieldUpdateOperationsInput | number
    OnuOnline?: IntFieldUpdateOperationsInput | number
    oltId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SlotsOLTListRelationFilter = {
    every?: slotsOLTWhereInput
    some?: slotsOLTWhereInput
    none?: slotsOLTWhereInput
  }

  export type slotsOLTOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type oltFoundCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    OltName?: SortOrder
    Armario?: SortOrder
    PowerdB?: SortOrder
    maxClients?: SortOrder
    ipAddress?: SortOrder
  }

  export type oltFoundAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type oltFoundMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    OltName?: SortOrder
    Armario?: SortOrder
    PowerdB?: SortOrder
    maxClients?: SortOrder
    ipAddress?: SortOrder
  }

  export type oltFoundMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    OltName?: SortOrder
    Armario?: SortOrder
    PowerdB?: SortOrder
    maxClients?: SortOrder
    ipAddress?: SortOrder
  }

  export type oltFoundSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OltFoundRelationFilter = {
    is?: oltFoundWhereInput
    isNot?: oltFoundWhereInput
  }

  export type slotsOLTCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    slot?: SortOrder
    OnuDiscovery?: SortOrder
    OnuProvisioned?: SortOrder
    OnuOnline?: SortOrder
    oltId?: SortOrder
  }

  export type slotsOLTAvgOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    OnuDiscovery?: SortOrder
    OnuProvisioned?: SortOrder
    OnuOnline?: SortOrder
    oltId?: SortOrder
  }

  export type slotsOLTMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    slot?: SortOrder
    OnuDiscovery?: SortOrder
    OnuProvisioned?: SortOrder
    OnuOnline?: SortOrder
    oltId?: SortOrder
  }

  export type slotsOLTMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    slot?: SortOrder
    OnuDiscovery?: SortOrder
    OnuProvisioned?: SortOrder
    OnuOnline?: SortOrder
    oltId?: SortOrder
  }

  export type slotsOLTSumOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    OnuDiscovery?: SortOrder
    OnuProvisioned?: SortOrder
    OnuOnline?: SortOrder
    oltId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type slotsOLTCreateNestedManyWithoutOltInput = {
    create?: XOR<slotsOLTCreateWithoutOltInput, slotsOLTUncheckedCreateWithoutOltInput> | slotsOLTCreateWithoutOltInput[] | slotsOLTUncheckedCreateWithoutOltInput[]
    connectOrCreate?: slotsOLTCreateOrConnectWithoutOltInput | slotsOLTCreateOrConnectWithoutOltInput[]
    connect?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
  }

  export type slotsOLTUncheckedCreateNestedManyWithoutOltInput = {
    create?: XOR<slotsOLTCreateWithoutOltInput, slotsOLTUncheckedCreateWithoutOltInput> | slotsOLTCreateWithoutOltInput[] | slotsOLTUncheckedCreateWithoutOltInput[]
    connectOrCreate?: slotsOLTCreateOrConnectWithoutOltInput | slotsOLTCreateOrConnectWithoutOltInput[]
    connect?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type slotsOLTUpdateManyWithoutOltNestedInput = {
    create?: XOR<slotsOLTCreateWithoutOltInput, slotsOLTUncheckedCreateWithoutOltInput> | slotsOLTCreateWithoutOltInput[] | slotsOLTUncheckedCreateWithoutOltInput[]
    connectOrCreate?: slotsOLTCreateOrConnectWithoutOltInput | slotsOLTCreateOrConnectWithoutOltInput[]
    upsert?: slotsOLTUpsertWithWhereUniqueWithoutOltInput | slotsOLTUpsertWithWhereUniqueWithoutOltInput[]
    set?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    disconnect?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    delete?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    connect?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    update?: slotsOLTUpdateWithWhereUniqueWithoutOltInput | slotsOLTUpdateWithWhereUniqueWithoutOltInput[]
    updateMany?: slotsOLTUpdateManyWithWhereWithoutOltInput | slotsOLTUpdateManyWithWhereWithoutOltInput[]
    deleteMany?: slotsOLTScalarWhereInput | slotsOLTScalarWhereInput[]
  }

  export type slotsOLTUncheckedUpdateManyWithoutOltNestedInput = {
    create?: XOR<slotsOLTCreateWithoutOltInput, slotsOLTUncheckedCreateWithoutOltInput> | slotsOLTCreateWithoutOltInput[] | slotsOLTUncheckedCreateWithoutOltInput[]
    connectOrCreate?: slotsOLTCreateOrConnectWithoutOltInput | slotsOLTCreateOrConnectWithoutOltInput[]
    upsert?: slotsOLTUpsertWithWhereUniqueWithoutOltInput | slotsOLTUpsertWithWhereUniqueWithoutOltInput[]
    set?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    disconnect?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    delete?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    connect?: slotsOLTWhereUniqueInput | slotsOLTWhereUniqueInput[]
    update?: slotsOLTUpdateWithWhereUniqueWithoutOltInput | slotsOLTUpdateWithWhereUniqueWithoutOltInput[]
    updateMany?: slotsOLTUpdateManyWithWhereWithoutOltInput | slotsOLTUpdateManyWithWhereWithoutOltInput[]
    deleteMany?: slotsOLTScalarWhereInput | slotsOLTScalarWhereInput[]
  }

  export type oltFoundCreateNestedOneWithoutSlotsInput = {
    create?: XOR<oltFoundCreateWithoutSlotsInput, oltFoundUncheckedCreateWithoutSlotsInput>
    connectOrCreate?: oltFoundCreateOrConnectWithoutSlotsInput
    connect?: oltFoundWhereUniqueInput
  }

  export type oltFoundUpdateOneRequiredWithoutSlotsNestedInput = {
    create?: XOR<oltFoundCreateWithoutSlotsInput, oltFoundUncheckedCreateWithoutSlotsInput>
    connectOrCreate?: oltFoundCreateOrConnectWithoutSlotsInput
    upsert?: oltFoundUpsertWithoutSlotsInput
    connect?: oltFoundWhereUniqueInput
    update?: XOR<XOR<oltFoundUpdateToOneWithWhereWithoutSlotsInput, oltFoundUpdateWithoutSlotsInput>, oltFoundUncheckedUpdateWithoutSlotsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type slotsOLTCreateWithoutOltInput = {
    status: number
    slot: string
    OnuDiscovery: number
    OnuProvisioned: number
    OnuOnline: number
  }

  export type slotsOLTUncheckedCreateWithoutOltInput = {
    id?: number
    status: number
    slot: string
    OnuDiscovery: number
    OnuProvisioned: number
    OnuOnline: number
  }

  export type slotsOLTCreateOrConnectWithoutOltInput = {
    where: slotsOLTWhereUniqueInput
    create: XOR<slotsOLTCreateWithoutOltInput, slotsOLTUncheckedCreateWithoutOltInput>
  }

  export type slotsOLTUpsertWithWhereUniqueWithoutOltInput = {
    where: slotsOLTWhereUniqueInput
    update: XOR<slotsOLTUpdateWithoutOltInput, slotsOLTUncheckedUpdateWithoutOltInput>
    create: XOR<slotsOLTCreateWithoutOltInput, slotsOLTUncheckedCreateWithoutOltInput>
  }

  export type slotsOLTUpdateWithWhereUniqueWithoutOltInput = {
    where: slotsOLTWhereUniqueInput
    data: XOR<slotsOLTUpdateWithoutOltInput, slotsOLTUncheckedUpdateWithoutOltInput>
  }

  export type slotsOLTUpdateManyWithWhereWithoutOltInput = {
    where: slotsOLTScalarWhereInput
    data: XOR<slotsOLTUpdateManyMutationInput, slotsOLTUncheckedUpdateManyWithoutOltInput>
  }

  export type slotsOLTScalarWhereInput = {
    AND?: slotsOLTScalarWhereInput | slotsOLTScalarWhereInput[]
    OR?: slotsOLTScalarWhereInput[]
    NOT?: slotsOLTScalarWhereInput | slotsOLTScalarWhereInput[]
    id?: IntFilter<"slotsOLT"> | number
    status?: IntFilter<"slotsOLT"> | number
    slot?: StringFilter<"slotsOLT"> | string
    OnuDiscovery?: IntFilter<"slotsOLT"> | number
    OnuProvisioned?: IntFilter<"slotsOLT"> | number
    OnuOnline?: IntFilter<"slotsOLT"> | number
    oltId?: IntFilter<"slotsOLT"> | number
  }

  export type oltFoundCreateWithoutSlotsInput = {
    status?: boolean
    OltName: string
    Armario: string
    PowerdB: string
    maxClients: string
    ipAddress: string
  }

  export type oltFoundUncheckedCreateWithoutSlotsInput = {
    id?: number
    status?: boolean
    OltName: string
    Armario: string
    PowerdB: string
    maxClients: string
    ipAddress: string
  }

  export type oltFoundCreateOrConnectWithoutSlotsInput = {
    where: oltFoundWhereUniqueInput
    create: XOR<oltFoundCreateWithoutSlotsInput, oltFoundUncheckedCreateWithoutSlotsInput>
  }

  export type oltFoundUpsertWithoutSlotsInput = {
    update: XOR<oltFoundUpdateWithoutSlotsInput, oltFoundUncheckedUpdateWithoutSlotsInput>
    create: XOR<oltFoundCreateWithoutSlotsInput, oltFoundUncheckedCreateWithoutSlotsInput>
    where?: oltFoundWhereInput
  }

  export type oltFoundUpdateToOneWithWhereWithoutSlotsInput = {
    where?: oltFoundWhereInput
    data: XOR<oltFoundUpdateWithoutSlotsInput, oltFoundUncheckedUpdateWithoutSlotsInput>
  }

  export type oltFoundUpdateWithoutSlotsInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    OltName?: StringFieldUpdateOperationsInput | string
    Armario?: StringFieldUpdateOperationsInput | string
    PowerdB?: StringFieldUpdateOperationsInput | string
    maxClients?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
  }

  export type oltFoundUncheckedUpdateWithoutSlotsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    OltName?: StringFieldUpdateOperationsInput | string
    Armario?: StringFieldUpdateOperationsInput | string
    PowerdB?: StringFieldUpdateOperationsInput | string
    maxClients?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
  }

  export type slotsOLTUpdateWithoutOltInput = {
    status?: IntFieldUpdateOperationsInput | number
    slot?: StringFieldUpdateOperationsInput | string
    OnuDiscovery?: IntFieldUpdateOperationsInput | number
    OnuProvisioned?: IntFieldUpdateOperationsInput | number
    OnuOnline?: IntFieldUpdateOperationsInput | number
  }

  export type slotsOLTUncheckedUpdateWithoutOltInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    slot?: StringFieldUpdateOperationsInput | string
    OnuDiscovery?: IntFieldUpdateOperationsInput | number
    OnuProvisioned?: IntFieldUpdateOperationsInput | number
    OnuOnline?: IntFieldUpdateOperationsInput | number
  }

  export type slotsOLTUncheckedUpdateManyWithoutOltInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    slot?: StringFieldUpdateOperationsInput | string
    OnuDiscovery?: IntFieldUpdateOperationsInput | number
    OnuProvisioned?: IntFieldUpdateOperationsInput | number
    OnuOnline?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OltFoundCountOutputTypeDefaultArgs instead
     */
    export type OltFoundCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OltFoundCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use oltFoundDefaultArgs instead
     */
    export type oltFoundArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = oltFoundDefaultArgs<ExtArgs>
    /**
     * @deprecated Use slotsOLTDefaultArgs instead
     */
    export type slotsOLTArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = slotsOLTDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}